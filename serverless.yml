# Serverless Framework Config
# Docs for full config options: docs.serverless.com
# Specifically relevant docs:
#  https://serverless.com/blog/serverless-express-rest-api/
#  https://serverless.com/framework/docs/providers/aws/events/alexa-skill/


service: meal-planner

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10

  # stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Resource: "arn:aws:dynamodb:*:*:table/PlannedMealsCollection"
      Resource:
        - "Fn::GetAtt": [ PlannedMealsCollection, Arn ]
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# Define service wide environment variables
#  environment:
#    variable1: value1

# Add packaging information
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - node_modules/aws-sdk/** # provided natively by AWS Lambda
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  violetDevHandler:
    handler: violetSLS.violetDevHandler
    events:
      - http:
          path: alexa
          method: get

  alexaHandler:
    handler: violetSLS.alexaHandler
    events:
      - http:
          path: alexa
          method: post
      - alexaSkill:
          appId: amzn1.ask.skill.2189c9b0-8ff9-45fc-b04c-f9b7e5ff604d

  googleHandler:
    handler: violetSLS.googleHandler
    events:
      - http:
          path: google
          method: post

#    A few example events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx

#    Define function environment variables here
#    environment:
#      variable2: value2

# Add CloudFormation resource templates
resources:
  Resources:
    PlannedMealsCollection:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: PlannedMealsCollection
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: meal_date_ex
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: meal_date_ex
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
